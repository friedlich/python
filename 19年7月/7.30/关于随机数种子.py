import numpy as np
np.random.seed(1) # 其实吧，这个随机数种子就是种下了你第一次运行代码的结果保存起来，之后你只要打开这个种子，随机数的结果
# 都会是你第一次运行的结果
X_assess = np.random.randn(5, 3) # 此时的我已经全部明白了，其实就是np.random.seed(1)种下标号为1的种子，接下来的
# np.random.randn(5, 3)以及np.random.randn(3, 3) 第一次的运行结果会被python记下，这个1号种子就是对应这些个固定的随机数
# 有意思的是，python的随机数似乎是固定的，至少在不同电脑上np.random.randn()第一次的运行结果是一样的，也可能是种子就是这样
# 的，第一个种子就对应了一系列随机变量，大概率是这个原理
Y_assess = np.random.randn(3, 3) 
print(X_assess)
print(Y_assess)

np.random.seed(2)
# np.random.seed(1)
X_assess = np.random.randn(2, 3)
print(X_assess)

# np.random.seed(3)
np.random.seed(1)
Y_assess = np.random.randn(1, 3)
print(Y_assess)

# np.random.seed(4)
np.random.seed(1)
X_assess = np.random.randn(3, 5)
Y_assess = np.random.randn(1, 3)
print(X_assess)
print(Y_assess)

# [[ 1.62434536 -0.61175641 -0.52817175]
#  [-1.07296862  0.86540763 -2.3015387 ]
#  [ 1.74481176 -0.7612069   0.3190391 ]
#  [-0.24937038  1.46210794 -2.06014071]
#  [-0.3224172  -0.38405435  1.13376944]]
# [[-1.09989127 -0.17242821 -0.87785842]
#  [ 0.04221375  0.58281521 -1.10061918]]
# [[-0.41675785 -0.05626683 -2.1361961 ]
#  [ 1.64027081 -1.79343559 -0.84174737]]
# [[1.78862847 0.43650985 0.09649747]]
# [[ 0.05056171  0.49995133 -0.99590893]
#  [ 0.69359851 -0.41830152 -1.58457724]]
# [[-0.64770677  0.59857517  0.33225003]]
## 以上这些个就是我种下的结果
# [[1.14472371 0.90159072 0.50249434]]
