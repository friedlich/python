# 位操作是程序设计中对位模式或二进制数的一元和二元操作. 在许多古老的微处理器上, 位运算比加减运算略快, 
# 通常位运算比乘除法运算要快很多. 在现代架构中, 情况并非如此:位运算的运算速度通常与加法运算相同(仍然快于乘法运算).

# 简单来说，按位运算就把数字转换为机器语言——二进制的数字来运算的一种运算形式。在计算机系统中，数值一律用补码来表示(存储)。

# Python中的按位运算符有：左移运算符（<<），右移运算符（>>）,按位与（&），按位或（|），按位翻转（～）。
# 这些运算符中只有按位翻转运算符是单目运算符，其他的都是双目运算符。

##按位与 &
# 举例： 3&5                        
# 解法：3的二进制补码是 11,  5的是101, 3&5也就是011&101,先看百位(其实不是百位,这样做只是便于理解) 一个0一个1,根据(1&1=1，
# 1&0=0，0&0=0，0&1=0)可知百位应该是1,同样十位上的数字1&0=0,个位上的数字1&1=1,因此最后的结果是1.(这之后本来应该还有一步,
# 因为我们现在得到的数值只是所求答案的补码,但是因为正数的补码即是它本身,所以就省略了。不过,下面的例子就不能省略最后这一步了). 
print(3&5)  
-1&-2
# 解法:-1的补码是11111111,  -2的补码是11111110, 11111111&11111110得到的结果是:11111110,这个是补码,再转化位原码为100000010 
# 简单来说，按位运算就把数字转换为机器语言——二进制的数字来运算的一种运算形式。在计算机系统中，数值一律用补码来表示(存储)。
# (负数转换位原码的方法是减一取反),最后转换为十进制
# 将原数按位取反后+1=原数的补码(原数的反数)
# 原数：在计算机中用2进制的方式表示一个普通数字所形成的数就是原数
#         例如：5=00000000 00000000 00000000 00000101
# 5取反后就为11111111  11111111  11111111  11111010其结果+1就是原数的补码即为-5的2进制表示
print(-1&-2)
-2&6   
# 解法:-2的补码是11111110,  6的补码是110,   11111110&110,也就是11111110&00000110(这样写的目的是让初学者能够更好理解按位运算)
# ,按照上面的方法得到的结果是:110,转化位十进制就是6.
# 小技巧：利用按位与可以将任意二进制数的最后一位变为0,即就是X&0.
print(-2&6)

##按位并 |
# 举例： 4|7
# 解法：按位并的计算规律和按位与的很相似，只不过换了逻辑运算符，并的规律是： 1|1=1 ,1 |0=1, 0|0=0.  4|7转换位二进制就是:
# 100|111=111.  二进制111即为十进制的7.
# 小技巧：利用按位并可以将任意二进制数的最后一位变为1,即就是X|1.

# 按位异或 ^
# 方法: 对位相加,特别要注意的是不进位.      
# 举例：2^5
# 解法:10^101=111,二进制111得到十进制的结果是7.
# 1^1 解法:1+1=0.(本来二进制1+1=10,但不能进位,所以结果是0) 
# -3^4 解法: -3的补码是11111101,4的补码是100 (也即00000100),11111101^00000100=11111001,补码11111001转为原码是00000111,
# 即十进制的-7.
print(2^5)
print(1^1)
print(-3^4)
# 按位翻转 ~   
# 方法: 将二进制数+1之后乘以-1,x的按位翻转是-(x+1) . 注意,按位运算符是单目运算符. ~9,1+~4是正确的,5~3就不对了.
# 举例: ~3 解法:3的二进制是11, -(11+1)=-100B=-4D. (注:B和D分别表示二进制和十进制).
# ~-2 解法: -(-10+1)=1
print(~4)  # 按位翻转(按位取反)：将内存中表示数字的2进制数取反0取1，1取0 （运算符：~）
print(~3)
print(~-2)
# 左移运算符 << 
# 方法: X<<N 将一个数字X所对应的二进制数向左移动N位
# 举例:3<<2 解法:11向左移动两位变为1100,即12 
print(3<<2)
# 右移动运算符  >>
# 方法:    X>>N 将一个数字X所对应的二进制数向右移动N位
# 举例:3>>2 解法:11向右移动两位变为0
# 10>>1 解法:10的二进制是1010,向右边移动一位是101,即5
print(3>>2)
print(10>>1)


# 在python中：

# 按位的运算，都按位的运算，都是把参加运算的数的二进制形式进行运算。

# 1.与运算：A与B值均为1时，A、B与的运算结果才为1，否则为0 （运算符：&）

# 2.或运算：A或B值为1时，A、B或的运算结果才为1，否则为0  （运算符：|）

# 3.异或运算：A与B不同为1时，A、B的预算结果才为1，否则为0  （运算符：^）

# 4.按位翻转(按位取反)：将内存中表示数字的2进制数取反0取1，1取0 （运算符：~）

# 运算方式：

# 1.与运算：5&3计算过程为 0101(2)&0011(2)=0001(2)=1

# 注释：意思是把两个数全部转换为二进制进行比较，如上例：5的二进制为0101,3的二进制为0011.则这两个数的二进制数种第一位相同，取一，其余全部取零。得0001，再转换为十进制结果为 1

# 为方便理解再举个例子，《python核心编程》中表5-4中的例子：>>>30&45  结果为12

# 即30=（011110）， 45=（101101）位运算得12（1100）

# 其余三种位运算与此相同

# 2.或运算：5|3计算过程为 0101(2)|0011(2)=0111(2)=7

# 3.异或运算：5^3计算过程为 0101(2)^0011(2)=0110(2)=6

# 4.按位翻转（按位取反）：5=0101(2) 计算过程~5=1010(2)   例如：X的按位运算为-(X+1)

# 其他位的运算：(<<，>>)

# 1. <<：左移把一个数的bit向左移动一定数目例如：2=0010(2)  2<<2=8（左移2位,1000(2))

# 2. >>：右移 方式与左移相同只是方向相反

# 计算机中的负数表示：

# 将原数按位取反后+1=原数的补码(原数的反数)

# 原数：在计算机中用2进制的方式表示一个普通数字所形成的数就是原数

#         例如：5=00000000 00000000 00000000 00000101

# 5取反后就为11111111  11111111  11111111  11111010其结果+1就是原数的补码即为-5的2进制表示

# C语言中：

# 优先级从高到低，依次为~、&、^、|

# 按位与运算有两种典型用法，一是取一个位串信息的某几位，如以下代码截取x的最低7位：x & 0177。二是让某变量保留某几位，其余位置0，如以下代码让x只保留最低6位：x = x & 077。

# 按位或运算的典型用法是将一个位串信息的某几位置为1。如将要获得最右4位为1，其他位与变量j原来其他位保持相同，可用逻辑或运算017|j；

# 按位异或运算的典型用法是求一个位串信息的某几位信息的反。如欲求整型变量j的最右4位信息的反，用逻辑异或运算017^j，就能求得j最右4位的信息的反,即原来为1的位，结果是0,原来为0的位，结果是1。交换两个值，不用临时变量,假如a=3,b=4。想将a和b的值互换，可以用以下赋值语句实现：
# a=a^b; b=b^a;     a=a^b;

# 取反运算常用来生成与系统实现无关的常数。如要将变量x最低6位置成0，其余位不变，可用代码x = x & ~077实现。


