cat － 连接文件
sort － 排序文本行
uniq － 报道或省略重复行
grep － 打印匹配行
wc － 打印文件中换行符，字，和字节个数
head － 输出文件第一部分
tail - 输出文件最后一部分
tee - 从标准输入读取数据，并同时写到标准输出和文件

可能有这种情况，我们希望捕捉一个命令的所有输出到一个文件。为了完成这个，我们 必须同时重定向标准输出和标准错误
有两种方法来完成任务。第一个，传统的方法， 在旧版本 shell 中也有效：
ls -l /bin/usr > ls-output.txt 2>&1
使用这种方法，我们完成两个重定向。首先重定向标准输出到文件 ls-output.txt，然后重定向文件描述符2（标准错误）到文件描述符1（标准输出）使用表示法2>&1

现在的 bash 版本提供了第二种方法，更精简合理的方法来执行这种联合的重定向
ls -l /bin/usr &>> ls-output.txt
ls -l ls-output.txt
在这个例子里面，我们使用单单一个表示法 &> 来重定向标准输出和错误到文件 ls-output.tt。

叫做”/dev/null”的特殊文件
这个文件是系统设备，叫做位存储桶，它可以 接受输入，并且对输入不做任何处理。为了隐瞒命令错误信息，我们这样做：
ls -l /bin/usr 2> /dev/null

cat 命令读取一个或多个文件，然后复制它们到标准输出，就像这样: cat [file]
cat 经常被用来显示简短的文本文件。因为 cat 可以 接受不只一个文件作为参数，所以它也可以用来把文件连接在一起。
cat > lazy_dog.txt
The quick brown fox jumped over the lazy dog.
输入命令，其后输入要放入文件中的文本。记住，最后输入 Ctrl-d。通过使用这个命令，我们实现了世界上最低能的文字处理器
cat < lazy_dog.txt
使用“<”重定向操作符，我们把标准输入源从键盘改到文件 lazy_dog.tx

命令从标准输入读取数据并输送到标准输出的能力被一个称为管道线的 shell 特性所利用。使用管道操作符”|”（竖杠），
一个命令的标准输出可以通过管道送至另一个命令的标准输入： command1 | command2
为了全面地说明这个命令，我们需要一些命令。是否记得我们说过，我们已经知道有一个 命令接受标准输入？它是 less 命令。
我们用 less 来一页一页地显示任何命令的输出，命令把它的运行结果输送到标准输出
这极其方便！使用这项技术，我们可以方便地检测会产生标准输出的任一命令的运行结果
管道线经常用来对数据完成复杂的操作。有可能会把几个命令放在一起组成一个管道线。通常，以这种方式使用的命令被称为过滤器。
过滤器接受输入，以某种方式改变它，然后输出它。第一个我们想试验的过滤器是sort。想象一下，我们想把目录/bin 和/usr/bin 中
的可执行程序都联合在一起，再把它们排序，然后浏览执行结果
ls /bin /usr/bin | sort | less
因为我们指定了两个目录（/bin 和/usr/bin），ls命令的输出结果由有序列表组成，各自针对一个目录。通过在管道线中包含 sort，
我们改变输出数据，从而产生一个有序列表
ls /bin /usr/bin | sort | uniq | less
在这个例子中，我们使用 uniq 从 sort 命令的输出结果中，来删除任何重复行。如果我们想看到重复的数据列表，让 uniq 命令带上”-d”选项，就像这样
ls /bin /usr/bin | sort | uniq -d | less

wc － 打印行数、字数和字节数
wc（字计数）命令是用来显示文件所包含的行数、字数和字节数。例如：
wc ls-output.txt
在这个例子中，wc 打印出来三个数字：包含在文件 ls-output.txt 中的行数，单词数和字节数， 正如我们先前的命令，如果 wc 不带命令行参数，
它接受标准输入。”-l”选项限制命令输出只能 报道行数。添加 wc 到管道线来统计数据，是个很便利的方法。查看我们的有序列表中程序个数， 我们可以这样做：
ls /bin /usr/bin | sort | uniq | wc -l

grep 是个很强大的程序，用来找到文件中的匹配文本。这样使用 grep 命令
grep pattern [file...]
当 grep 遇到一个文件中的匹配”模式”，它会打印出包含这个类型的行。grep 能够匹配的模式可以 很复杂，但是现在我们把注意力集中在简单文本匹配上面。
在后面的章节中，我们将会研究 高级模式，叫做正则表达式
比如说，我们想在我们的程序列表中，找到文件名中包含单词”zip”的所有文件。这样一个搜索， 可能让我们了解系统中的一些程序与文件压缩有关系。这样做
ls /bin /usr/bin | sort | uniq | grep zip
grep 有一些方便的选项：”-i”使得 grep 在执行搜索时忽略大小写（通常，搜索是大小写 敏感的），”-v”选项会告诉 grep 只打印不匹配的行

head / tail － 打印文件开头部分/结尾部分
有时候你不需要一个命令的所有输出。可能你只想要前几行或者后几行的输出内容。 head 命令打印文件的前十行，而 tail 命令打印文件的后十行。
默认情况下，两个命令 都打印十行文本，但是可以通过”-n”选项来调整命令打印的行数。
head -n 5 ls-output.txt
tail -n 5 ls-output.txt
它们也能用在管道线中：
ls /usr/bin | tail -n 5

tail 有一个选项允许你实时地浏览文件。当观察日志文件的进展时，这很有用，因为 它们同时在被写入。在以下的例子里，我们要查看目录/var/log
里面的信息文件。在 一些 Linux 发行版中，要求有超级用户权限才能阅读这些文件，因为文件/var/log/messages 可能包含安全信息
使用”-f”选项，tail 命令继续监测这个文件，当新的内容添加到文件后，它们会立即出现在屏幕上。这会一直继续下去直到你输入 Ctrl-c。

tee － 从 Stdin 读取数据，并同时输出到 Stdout 和文件
为了和我们的管道隐喻保持一致，Linux 提供了一个叫做 tee 的命令，这个命令制造了 一个”tee”，安装到我们的管道上。tee 程序从标准输入读入数据，
并且同时复制数据 到标准输出（允许数据继续随着管道线流动）和一个或多个文件。当在某个中间处理 阶段来捕捉一个管道线的内容时，这很有帮助。
这里，我们重复执行一个先前的例子， 这次包含 tee 命令，在 grep 过滤管道线的内容之前，来捕捉整个目录列表到文件 ls.txt：
ls /usr/bin | tee ls.txt | grep zip

一如既往，查看这章学到的每一个命令的文档。我们已经知道了他们最基本的用法。 它们还有很多有趣的选项。随着我们 Linux 经验的积累，
我们会了解命令行重定向特性 在解决特殊问题时非常有用处。有许多命令利用标准输入和输出，而几乎所有的命令行 程序都使用标准错误来显示它们的详细信息