在这一章中，我们将看看这一系统安全的本质部分，会介绍以下命令
id – Display user identity
id – 显示用户身份号
chmod – Change a file’s mode
chmod – 更改文件模式
umask – Set the default file permissions
umask – 设置默认的文件权限
su – Run a shell as another user
su – 以另一个用户的身份来运行 shell
sudo – Execute a command as another user
sudo – 以另一个用户的身份来执行命令
chown – Change a file’s owner
chown – 更改文件所有者
chgrp – Change a file’s group ownership
chgrp – 更改文件组所有权
passwd – Change a user’s password
passwd – 更改用户密码

表10-1: 文件类型 属性 	文件类型
- 	一个普通文件
d 	一个目录
l 	一个符号链接。注意对于符号链接文件，剩余的文件属性总是"rwxrwxrwx"，而且都是 虚拟值。真正的文件属性是指符号链接所指向的文件的属性。
c 	一个字符设备文件。这种文件类型是指按照字节流来处理数据的设备。 比如说终端机或者调制解调器
b 	一个块设备文件。这种文件类型是指按照数据块来处理数据的设备，例如一个硬盘或者 CD-ROM 盘。

当设置文件模式后，r、w和x 模式属性对文件和目录会产生以下影响：
表 10-2: 权限属性
属性 	文件 	目录
r 	允许打开并读取文件内容。 	允许列出目录中的内容，前提是目录必须设置了可执行属性（x）。
w 	允许写入文件内容或截断文件。但是不允许对文件进行重命名或删除，重命名或删除是由目录的属性决定的。 	允许在目录下新建、删除或重命名文件，前提是目录必须设置了可执行属性（x）。
x 	允许将文件作为程序来执行，使用脚本语言编写的程序必须设置为可读才能被执行。 	允许进入目录，例如：cd directory 。

表 10-3: 权限属性示例 文件属性 	含义
-rwx------ 	一个普通文件，对文件所有者来说可读、可写、可执行。其他人无法访问。
-rw------- 	一个普通文件，对文件所有者来说可读可写。其他人无法访问。
-rw-r--r-- 	一个普通文件，对文件所有者来说可读可写，文件所有者的组成员可以读该文件，其他所有人都可以读该文件。
-rwxr-xr-x 	一个普通文件，对文件所有者来说可读、可写、可执行。也可以被其他的所有人读取和执行。
-rw-rw---- 	一个普通文件，对文件所有者以及文件所有者的组成员来说可读可写。
lrwxrwxrwx 	一个符号链接，符号链接的权限都是虚拟的，真实的权限应该以符号链接指向的文件为准。
drwxrwx--- 	一个目录，文件所有者以及文件所有者的组成员可以访问该目录，并且可以在该目录下新建、重命名、删除文件。
drwxr-x--- 	一个目录，文件所有者可以访问该目录，并且可以在该目录下新建、重命名、删除文件，文件所有者的组成员可以访问该目录，但是不能新建、重命名、删除文件。

更改文件或目录的模式（权限），可以利用 chmod 命令。注意只有文件的所有者或者超级用户才 能更改文件或目录的模式。
chmod 命令支持两种不同的方法来改变文件模式：八进制数字表示法或 符号表示法。首先我们讨论一下八进制数字表示法。
八进制（以8为基数）及其亲戚十六进制（以16为基数）都是数字系统，通常 被用来表示计算机中的数字。我们人类，因为（或者至少大多数人）天生有 十个手指的事实，
利用以10为基数的数字系统来计数。计算机，从另一方面讲，生来只有一个 手指，因此它以二进制（以2为基数）来计数。它们的数字系统只有两个数值，0和1。
因此在二进制中，计数看起来像这样：
虽然我们能知道二进制的意义（因为计算机只有一个手指），但是八进制和十六进制对什么 有好处呢？ 答案是为了人类的便利。许多时候，在计算机中，一小部分数据以二进制的形式表示。
以 RGB 颜色为例来说明。大多数的计算机显示器，每个像素由三种颜色组成：8位红色，8位绿色， 8位蓝色。这样，一种可爱的中蓝色就由24位数字来表示
另一种数字系统对我们更有帮助。每个十六进制 数字代表四个二进制。在八进制中，每个数字代表三个二进制数字。那么代表中蓝色的24位 二进制能够压缩成6位十六进制数：
436FCD
因为十六进制中的两个数字对应二进制的8位数字，我们可以看到”43“代表红色，“6F” 代表绿色，“CD”代表蓝色。
现在，十六进制表示法（经常叫做“hex”）比八进制更普遍，但是我们很快会看到，用八进制 来表示3个二进制数非常有用处…
通过八进制表示法，我们使用八进制数字来设置所期望的权限模式。因为每个八进制数字代表了 3个二进制数字，这种对应关系，正好映射到用来存储文件模式所使用的方案上。
下表展示了 我们所要表达的意思：
Octal 	Binary 	File Mode
0 	000 	---
1 	001 	--x
2 	010 	-w-
3 	011 	-wx
4 	100 	r--
5 	101 	r-x
6 	110 	rw-
7 	111 	rwx
通过使用3个八进制数字，我们能够设置文件所有者、用户组和其他人的权限
通过传递参数 “600”，我们能够设置文件所有者的权限为读写权限，而删除用户组和其他人的所有 权限。虽然八进制到二进制的映射看起来不方便，
但通常只会用到一些常见的映射关系： 7 (rwx)，6 (rw-)，5 (r-x)，4 (r--)，和 0 (---)。
chmod 命令支持一种符号表示法，来指定文件模式。符号表示法分为三部分：更改会影响谁， 要执行哪个操作，要设置哪种权限。
通过字符 “u”、“g”、“o”和 “a” 的组合来指定 要影响的对象，如下所示：
表10-4: chmod 命令符号表示法
u 	"user"的简写，意思是文件或目录的所有者。
g 	用户组。
o 	"others"的简写，意思是其他所有的人。
a 	"all"的简写，是"u", "g"和“o”三者的联合。
如果没有指定字符，则假定使用”all”。执行的操作可能是一个“＋”字符，表示加上一个权限， 一个“－”，表示删掉一个权限，或者是一个“＝”，
表示只有指定的权限可用，其它所有的权限被删除。

权限由 “r”、“w”和 “x” 来指定。这里是一些符号表示法的实例
表10-5: chmod 符号表示法实例
u+x 	为文件所有者添加可执行权限。
u-x 	删除文件所有者的可执行权限。
+x 	为文件所有者，用户组，和其他所有人添加可执行权限。 等价于 a+x。
o-rw 	除了文件所有者和用户组，删除其他人的读权限和写权限。
go=rw 	给文件所属的组和文件所属者/组以外的人读写权限。如果文件所属组或其他人已经拥有执行的权限，执行权限将被移除。
u+x,go=rw 	给文件拥有者执行权限并给组和其他人读和执行的权限。多种设定可以用逗号分开。

一些人喜欢使用八进制表示法，而另一些人则非常喜欢符号表示法。符号表示法的优点是， 允许你设置文件模式的某个属性，而不影响其他的属性。
看一下 chmod 命令的手册页，可以得到更详尽的信息和 chmod 命令的各个选项。要注意”--recursive”选项： 它可以同时作用于文件和目录，所以它并不是如我们期望的那么有用处，
因为我们很少希望文件和 目录拥有同样的权限。

借助 GUI 来设置文件模式
现在我们已经知道了怎样设置文件和目录的权限，这样我们就可以更好的理解 GUI 中的设置 权限对话框。在 Nautilus (GNOME)和 Konqueror (KDE)中，
右击一个文件或目录图标将会弹出一个属性对话框。下面这个例子来自 KDE 3.5：

从这个对话框中，我们看到可以设置文件所有者、用户组和其他人的访问权限。 在 KDE 中，右击”Advanced Permissions”按钮，会打开另一个对话框，
这个对话框允许 你单独设置各个模式属性。这也可以通过命令行来理解！

umask － 设置默认权限
当创建一个文件时，umask 命令控制着文件的默认权限。umask 命令使用八进制表示法来表达 从文件模式属性中删除一个位掩码。大家看下面的例子：

首先，删除文件 foo.txt，以此确定我们从新开始。下一步，运行不带参数的 umask 命令， 看一下当前的掩码值。响应的数值是0002（0022是另一个常用值）
，这个数值是掩码的八进制 表示形式。下一步，我们创建文件 foo.txt，并且保留它的权限。

我们可以看到文件所有者和用户组都得到读权限和写权限，而其他人只是得到读权限。 其他人没有得到写权限的原因是由掩码值决定的。重复我们的实验，这次自己设置掩码值：
当掩码设置为0000（实质上是关掉它）之后，我们看到其他人能够读写文件。为了弄明白这是 怎么回事，我们需要看一下掩码的八进制形式。把掩码展开成二进制形式，
然后与文件属性 相比较，看看有什么区别：

这里有一些例子，使用 chmod 命令和符号表示法，来设置这些特殊的权限。首先， 授予一个程序 setuid 权限。
su － 以其他用户身份和组 ID 运行一个 shell
如果包含”-l”选项，那么会为指定用户启动一个需要登录的 shell。这意味着会加载此用户的 shell 环境， 并且工作目录会更改到这个用户的家目录。
这通常是我们所需要的。如果不指定用户，那么就假定是 超级用户。注意（不可思议地），选项”-l”可以缩写为”-“，这是经常用到的形式。
启动超级用户的 shell， 我们可以这样做：
su -
以这样的方式使用 su 命令，也可以只执行单个命令，而不是启动一个新的可交互的 shell：
su -c 'command'

使用这种模式，命令传递到一个新 shell 中执行。把命令用单引号引起来很重要，因为我们不想 命令在我们的 shell 中展开，但需要在新 shell 中展开。
su -c 'ls -l /root/*'
sudo － 以另一个用户身份执行命令
su 和 sudo 之间的一个重要区别是 sudo 不会重新启动一个 shell，也不会加载另一个 用户的 shell 运行环境。这意味者命令不必用单引号引起来。
注意通过指定各种各样的选项，这 种行为可以被推翻。

chown － 更改文件所有者和用户组
chown 命令被用来更改文件或目录的所有者和用户组。使用这个命令需要超级用户权限。chown 命令 的语法看起来像这样：
chown 可以根据这个命令的第一个参数更改文件所有者和/或文件用户组。这里有 一些例子：
参数 	结果
bob 	把文件所有者从当前属主更改为用户 bob。
bob:users 	把文件所有者改为用户 bob，文件用户组改为用户组 users。
:admins 	把文件用户组改为组 admins，文件所有者不变。
bob: 	文件所有者改为用户 bob，文件用户组改为用户 bob 登录系统时所属的用户组。

chgrp － 更改用户组所有权
旧版 Unix 系统中，chown 命令只能更改文件所有权，而不是用户组所有权。为了达到目的， 使用一个独立的命令，chgrp 来完成。除了限制多一点之外，chgrp 命令与 chown 命令使用起来很相似。